{
	"entries": [
		{
			"name": "result",
			"equal": "[*pretty.CommonValueWriter] => {\n\tPanicRecover: [*pretty.PanicRecoverValueWriter] => {\n\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).postPanicRecover-fm,\n\t},\n\tUnwrapInterface: [*pretty.UnwrapInterfaceValueWriter] => {\n\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).postUnwrapInterface-fm,\n\t},\n\tRecursion: [*pretty.RecursionValueWriter] => {\n\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).postRecursion-fm,\n\t},\n\tMaxDepth: [*pretty.MaxDepthValueWriter] => {\n\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).postMaxDepth-fm,\n\t\tMax: [int] 0,\n\t},\n\tCanInterface: [*pretty.CanInterfaceValueWriter] => {\n\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).postCanInterface-fm,\n\t},\n\tTypeAndValue: [*pretty.TypeAndValueWriter] => {\n\t\tType: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).writeType-fm,\n\t\tValue: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).postTypeAndValue-fm,\n\t\tShowKnownTypes: [bool] false,\n\t\tShowBaseType: [bool] true,\n\t},\n\tType: [*pretty.TypeValueWriter] => {\n\t\tStringer: [func(reflect.Type) string] reflect.Type.String,\n\t},\n\tKind: [*pretty.KindValueWriter] => {\n\t\tBaseInvalid: [*pretty.InvalidValueWriter] => {},\n\t\tBaseBool: [*pretty.BoolValueWriter] => {},\n\t\tBaseInt: [*pretty.IntValueWriter] => {\n\t\t\tBase: [int] 10,\n\t\t},\n\t\tBaseUint: [*pretty.UintValueWriter] => {\n\t\t\tBase: [int] 10,\n\t\t},\n\t\tBaseUintptr: [*pretty.UintptrValueWriter] => {},\n\t\tBaseFloat: [*pretty.FloatValueWriter] => {\n\t\t\tFormat: [uint8] 103,\n\t\t\tPrecision: [int] -1,\n\t\t},\n\t\tBaseComplex: [*pretty.ComplexValueWriter] => {\n\t\t\tFormat: [uint8] 103,\n\t\t\tPrecision: [int] -1,\n\t\t},\n\t\tBaseArray: [*pretty.ArrayValueWriter] => {\n\t\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).loopback-fm,\n\t\t\tMaxLen: [int] 0,\n\t\t},\n\t\tBaseChan: [*pretty.ChanValueWriter] => {\n\t\t\tShowLen: [bool] false,\n\t\t\tShowCap: [bool] false,\n\t\t\tShowAddr: [bool] false,\n\t\t},\n\t\tBaseFunc: [*pretty.FuncValueWriter] => {\n\t\t\tShowAddr: [bool] false,\n\t\t},\n\t\tBaseInterface: [*pretty.InterfaceValueWriter] => {\n\t\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).loopback-fm,\n\t\t},\n\t\tBaseMap: [*pretty.MapValueWriter] => {\n\t\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).loopback-fm,\n\t\t\tShowLen: [bool] false,\n\t\t\tShowAddr: [bool] false,\n\t\t\tSortKeys: [bool] true,\n\t\t\tSortKeysCmpDefault: [func(reflect.Value, reflect.Value) int] github.com/pierrre/pretty.mapSortKeysCmpDefault,\n\t\t\tMaxLen: [int] 0,\n\t\t},\n\t\tBasePointer: [*pretty.PointerValueWriter] => {\n\t\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).loopback-fm,\n\t\t\tShowAddr: [bool] false,\n\t\t},\n\t\tBaseSlice: [*pretty.SliceValueWriter] => {\n\t\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).loopback-fm,\n\t\t\tShowLen: [bool] false,\n\t\t\tShowCap: [bool] false,\n\t\t\tShowAddr: [bool] false,\n\t\t\tMaxLen: [int] 0,\n\t\t},\n\t\tBaseString: [*pretty.StringValueWriter] => {\n\t\t\tShowLen: [bool] false,\n\t\t\tQuote: [bool] true,\n\t\t\tMaxLen: [int] 0,\n\t\t},\n\t\tBaseStruct: [*pretty.StructValueWriter] => {\n\t\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).loopback-fm,\n\t\t\tUnexported: [bool] true,\n\t\t},\n\t\tBaseUnsafePointer: [*pretty.UnsafePointerValueWriter] => {},\n\t\tInvalid: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeInvalid-fm,\n\t\tBool: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeBool-fm,\n\t\tInt: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeInt-fm,\n\t\tInt8: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeInt-fm,\n\t\tInt16: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeInt-fm,\n\t\tInt32: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeInt-fm,\n\t\tInt64: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeInt-fm,\n\t\tUint: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeUint-fm,\n\t\tUint8: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeUint-fm,\n\t\tUint16: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeUint-fm,\n\t\tUint32: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeUint-fm,\n\t\tUint64: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeUint-fm,\n\t\tUintptr: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeUintptr-fm,\n\t\tFloat32: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeFloat-fm,\n\t\tFloat64: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeFloat-fm,\n\t\tComplex64: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeComplex-fm,\n\t\tComplex128: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeComplex-fm,\n\t\tArray: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeArray-fm,\n\t\tChan: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeChan-fm,\n\t\tFunc: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeFunc-fm,\n\t\tInterface: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeInterface-fm,\n\t\tMap: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeMap-fm,\n\t\tPointer: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writePointer-fm,\n\t\tSlice: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeSlice-fm,\n\t\tString: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeString-fm,\n\t\tStruct: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeStruct-fm,\n\t\tUnsafePointer: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*KindValueWriter).writeUnsafePointer-fm,\n\t},\n\tReflectValue: [*pretty.ReflectValueWriter] => {\n\t\tValueWriter: [pretty.ValueWriter](func(*pretty.Config, io.Writer, pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).loopback-fm,\n\t},\n\tError: [*pretty.ErrorValueWriter] => {},\n\tBytesHexDump: [*pretty.BytesHexDumpValueWriter] => {\n\t\tShowLen: [bool] false,\n\t\tShowCap: [bool] false,\n\t\tShowAddr: [bool] false,\n\t\tMaxLen: [int] 0,\n\t},\n\tBytesableHexDump: [*pretty.BytesableHexDumpValueWriter] => {\n\t\tShowLen: [bool] false,\n\t\tShowCap: [bool] false,\n\t\tShowAddr: [bool] false,\n\t\tMaxLen: [int] 0,\n\t},\n\tStringer: [*pretty.StringerValueWriter] => {\n\t\tShowLen: [bool] false,\n\t\tQuote: [bool] true,\n\t\tMaxLen: [int] 0,\n\t},\n\tValueWriters: [pretty.ValueWriters]([]pretty.ValueWriter) (len=5 cap=5) {\n\t\tgithub.com/pierrre/pretty.(*CommonValueWriter).reflectValue-fm,\n\t\tgithub.com/pierrre/pretty.(*CommonValueWriter).error-fm,\n\t\tgithub.com/pierrre/pretty.(*CommonValueWriter).bytesHexDump-fm,\n\t\tgithub.com/pierrre/pretty.(*CommonValueWriter).bytesableHexDump-fm,\n\t\tgithub.com/pierrre/pretty.(*CommonValueWriter).stringer-fm,\n\t},\n}"
		},
		{
			"name": "allocs",
			"allocs_per_run": {
				"runs": 100,
				"allocs": 0
			}
		}
	]
}
