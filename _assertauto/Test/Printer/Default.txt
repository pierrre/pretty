[*github.com/pierrre/pretty.Printer] => {
	ValueWriter: [*github.com/pierrre/pretty.CommonValueWriter] => {
		UnwrapInterface: [bool] true,
		RecursionCheck: [bool] true,
		MaxDepth: [int] 0,
		CanInterface: [bool] true,
		ShowType: [bool] true,
		Type: [github.com/pierrre/pretty.TypeValueWriter] {
			ValueWriter: [github.com/pierrre/pretty.ValueWriterFunc](func(*pretty.State, reflect.Value) bool) github.com/pierrre/pretty.(*CommonValueWriter).internal-fm,
			ShowKnownTypes: [bool] false,
			ShowBaseType: [bool] true,
		},
		ByTypeValueWriters: [github.com/pierrre/pretty.ByTypeValueWriters](map[reflect.Type]github.com/pierrre/pretty.ValueWriter) (len=0) {},
		ValueWriters: [github.com/pierrre/pretty.ValueWriters]([]github.com/pierrre/pretty.ValueWriter) <nil>,
		ReflectValue: [*github.com/pierrre/pretty.ReflectValueWriter] => {
			ValueWriter: <recursion>,
		},
		ReflectType: [*github.com/pierrre/pretty.ReflectTypeWriter] => {},
		Time: [*github.com/pierrre/pretty.TimeValueWriter] => {
			Format: [string] (len=35) "2006-01-02T15:04:05.999999999Z07:00",
			Location: [*time.Location] <nil>,
		},
		Error: [*github.com/pierrre/pretty.ErrorValueWriter] => {
			Write: [func(*pretty.State, error)] github.com/pierrre/pretty.(*ErrorValueWriter).WriteError-fm,
		},
		MathBigInt: [*github.com/pierrre/pretty.MathBigIntWriter] => {
			Base: [int] 10,
		},
		WeakPointer: [*github.com/pierrre/pretty.WeakPointerWriter] => {
			ValueWriter: <recursion>,
		},
		BytesHexDump: [*github.com/pierrre/pretty.BytesHexDumpValueWriter] => {
			ShowLen: [bool] true,
			ShowCap: [bool] false,
			ShowAddr: [bool] false,
			MaxLen: [int] 0,
		},
		BytesableHexDump: [*github.com/pierrre/pretty.BytesableHexDumpValueWriter] => {
			ShowLen: [bool] true,
			ShowCap: [bool] false,
			ShowAddr: [bool] false,
			MaxLen: [int] 0,
		},
		Stringer: [*github.com/pierrre/pretty.StringerValueWriter] => {
			ShowLen: [bool] true,
			Quote: [bool] true,
			MaxLen: [int] 0,
		},
		Iter: [*github.com/pierrre/pretty.IterValueWriter] => {
			ValueWriter: <recursion>,
			ShowKeysInfos: [bool] false,
			MaxLen: [int] 0,
		},
		Kind: [*github.com/pierrre/pretty.KindValueWriter] => {
			Invalid: [github.com/pierrre/pretty.InvalidValueWriter] {},
			Bool: [github.com/pierrre/pretty.BoolValueWriter] {},
			Int: [github.com/pierrre/pretty.IntValueWriter] {
				Base: [int] 10,
			},
			Uint: [github.com/pierrre/pretty.UintValueWriter] {
				Base: [int] 10,
			},
			Uintptr: [github.com/pierrre/pretty.UintptrValueWriter] {},
			Float: [github.com/pierrre/pretty.FloatValueWriter] {
				Format: [uint8] 103,
				Precision: [int] -1,
			},
			Complex: [github.com/pierrre/pretty.ComplexValueWriter] {
				Format: [uint8] 103,
				Precision: [int] -1,
			},
			Array: [github.com/pierrre/pretty.ArrayValueWriter] {
				ValueWriter: <recursion>,
				ShowIndexes: [bool] false,
				MaxLen: [int] 0,
			},
			Chan: [github.com/pierrre/pretty.ChanValueWriter] {
				ValueWriter: <recursion>,
				ShowLen: [bool] true,
				ShowCap: [bool] false,
				ShowAddr: [bool] false,
				ShowElems: [bool] false,
				ShowIndexes: [bool] false,
				MaxLen: [int] 0,
			},
			Func: [github.com/pierrre/pretty.FuncValueWriter] {
				ShowAddr: [bool] false,
			},
			Interface: [github.com/pierrre/pretty.InterfaceValueWriter] {
				ValueWriter: <recursion>,
			},
			Map: [github.com/pierrre/pretty.MapValueWriter] {
				ValueWriter: <recursion>,
				ShowLen: [bool] true,
				ShowAddr: [bool] false,
				SortKeys: [bool] true,
				ShowKeysInfos: [bool] false,
				MaxLen: [int] 0,
			},
			Pointer: [github.com/pierrre/pretty.PointerValueWriter] {
				ValueWriter: <recursion>,
				ShowAddr: [bool] false,
			},
			Slice: [github.com/pierrre/pretty.SliceValueWriter] {
				ValueWriter: <recursion>,
				ShowLen: [bool] true,
				ShowCap: [bool] false,
				ShowAddr: [bool] false,
				ShowIndexes: [bool] false,
				MaxLen: [int] 0,
			},
			String: [github.com/pierrre/pretty.StringValueWriter] {
				ShowLen: [bool] true,
				ShowAddr: [bool] false,
				Quote: [bool] true,
				MaxLen: [int] 0,
			},
			Struct: [github.com/pierrre/pretty.StructValueWriter] {
				ValueWriter: <recursion>,
				FieldFilter: [github.com/pierrre/pretty.StructFieldFilter](func(reflect.Value, reflect.StructField) bool) <nil>,
			},
			UnsafePointer: [github.com/pierrre/pretty.UnsafePointerValueWriter] {},
			ValueWriters: [[27]github.com/pierrre/pretty.ValueWriter] {
				[*github.com/pierrre/pretty.InvalidValueWriter] => {},
				[*github.com/pierrre/pretty.BoolValueWriter] => {},
				[*github.com/pierrre/pretty.IntValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.IntValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.IntValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.IntValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.IntValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.UintValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.UintValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.UintValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.UintValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.UintValueWriter] => {
					Base: [int] 10,
				},
				[*github.com/pierrre/pretty.UintptrValueWriter] => {},
				[*github.com/pierrre/pretty.FloatValueWriter] => {
					Format: [uint8] 103,
					Precision: [int] -1,
				},
				[*github.com/pierrre/pretty.FloatValueWriter] => {
					Format: [uint8] 103,
					Precision: [int] -1,
				},
				[*github.com/pierrre/pretty.ComplexValueWriter] => {
					Format: [uint8] 103,
					Precision: [int] -1,
				},
				[*github.com/pierrre/pretty.ComplexValueWriter] => {
					Format: [uint8] 103,
					Precision: [int] -1,
				},
				[*github.com/pierrre/pretty.ArrayValueWriter] => {
					ValueWriter: <recursion>,
					ShowIndexes: [bool] false,
					MaxLen: [int] 0,
				},
				[*github.com/pierrre/pretty.ChanValueWriter] => {
					ValueWriter: <recursion>,
					ShowLen: [bool] true,
					ShowCap: [bool] false,
					ShowAddr: [bool] false,
					ShowElems: [bool] false,
					ShowIndexes: [bool] false,
					MaxLen: [int] 0,
				},
				[*github.com/pierrre/pretty.FuncValueWriter] => {
					ShowAddr: [bool] false,
				},
				[*github.com/pierrre/pretty.InterfaceValueWriter] => {
					ValueWriter: <recursion>,
				},
				[*github.com/pierrre/pretty.MapValueWriter] => {
					ValueWriter: <recursion>,
					ShowLen: [bool] true,
					ShowAddr: [bool] false,
					SortKeys: [bool] true,
					ShowKeysInfos: [bool] false,
					MaxLen: [int] 0,
				},
				[*github.com/pierrre/pretty.PointerValueWriter] => {
					ValueWriter: <recursion>,
					ShowAddr: [bool] false,
				},
				[*github.com/pierrre/pretty.SliceValueWriter] => {
					ValueWriter: <recursion>,
					ShowLen: [bool] true,
					ShowCap: [bool] false,
					ShowAddr: [bool] false,
					ShowIndexes: [bool] false,
					MaxLen: [int] 0,
				},
				[*github.com/pierrre/pretty.StringValueWriter] => {
					ShowLen: [bool] true,
					ShowAddr: [bool] false,
					Quote: [bool] true,
					MaxLen: [int] 0,
				},
				[*github.com/pierrre/pretty.StructValueWriter] => {
					ValueWriter: <recursion>,
					FieldFilter: [github.com/pierrre/pretty.StructFieldFilter](func(reflect.Value, reflect.StructField) bool) <nil>,
				},
				[*github.com/pierrre/pretty.UnsafePointerValueWriter] => {},
			},
		},
	},
	Indent: [string] (len=1) "\t",
}
	========== assertauto ==========
[github.com/pierrre/assert/assertauto.allocsPerRun] {
	Runs: [int] 100,
	Allocs: [float64] 0,
}